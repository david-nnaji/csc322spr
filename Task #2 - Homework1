// Import THREE
import * as THREE from 'https://threejsfundamentals.org/threejs/resources/threejs/r132/build/three.module.js';
// Import Orbit controls
import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/controls/OrbitControls.js';

// Set up the scene, camera, and renderer
var scene = new THREE.Scene();
var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.z = 5;

var renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// the vertices of a tetrahedron
const vertices = new Float32Array([
    0, 1, 0,   // Top vertex
    -1, -1, 1, // Bottom left front vertex
    1, -1, 1,  // Bottom right front vertex
    0, -1, -1  // Bottom back vertex
]);

// the indices for the tetrahedron's edges
const indices = [
    0, 1, // top to bottom left front
    0, 2, // top to bottom right front
    0, 3, // top to bottom back
    1, 2, // bottom left front to bottom right front
    1, 3, // bottom left front to bottom back
    2, 3  // bottom right front to bottom back
];

// create BufferGeometry and set the vertices and indices
const geometry = new THREE.BufferGeometry();
geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));
geometry.setIndex(indices);

// create a material for the shape
const material = new THREE.LineBasicMaterial({
    color: 0xFFFFFF, // changing color from blue to make it more visible
    transparent: true, // Enable transparency
    opacity: 0.7 // Set opacity (0 = fully transparent, 1 = fully opaque)
});

// Create a line segments object for the wireframe tetrahedron
const wireframeTetrahedron = new THREE.LineSegments(geometry, material);
scene.add(wireframeTetrahedron);

// directional light for better visibility
var directionalLight = new THREE.DirectionalLight(0xffffff, 1);
directionalLight.position.set(1, 1, 1);
scene.add(directionalLight);

// Add OrbitControls
var controls = new OrbitControls(camera, renderer.domElement);

// Animation loop
var animate = function () 
{
    requestAnimationFrame(animate);
    wireframeTetrahedron.rotation.x += 0.01;
    wireframeTetrahedron.rotation.y += 0.01;
    renderer.render(scene, camera);
};

animate();
