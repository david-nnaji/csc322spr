// Import THREE
import * as THREE from 'https://threejsfundamentals.org/threejs/resources/threejs/r132/build/three.module.js';
// Import OrbitControls
import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/controls/OrbitControls.js';

// Create renderer
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// Create camera
const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 500);
camera.position.set(0, 0, 100);

// Create OrbitControls
const controls = new OrbitControls(camera, renderer.domElement);
controls.enableDamping = true;
controls.dampingFactor = 0.05;
controls.screenSpacePanning = false;
controls.minDistance = 10;
controls.maxDistance = 200;

// Create scene
const scene = new THREE.Scene();

// Define material
const circleMaterial = new THREE.LineBasicMaterial({ color: 0xff0000 });

// Generate points for the implicit function
const circlePoints = [];
const radius = 25;  // affects size of the shape
const segments = 400;

for (let i = 0; i <= segments; i++) {
    const theta = (i / segments) * 2 * Math.PI; // from 0 to 2pi
    const cosTheta = Math.cos(theta);
    const sinTheta = Math.sin(theta);
    
    // Compute r from the implicit equation (solving for rÂ²)
    const rSquared = (4 * (cosTheta * cosTheta - sinTheta * sinTheta)) / (cosTheta * cosTheta + sinTheta * sinTheta) ** 2;

    if (rSquared >= 0) { // ensures plotting real values
        const r = Math.sqrt(rSquared) * radius; // Scale the radius
        const x = r * cosTheta;
        const y = r * sinTheta;
        circlePoints.push(new THREE.Vector3(x, y, 0));
    }
}

// Create geometry and line
const circleGeometry = new THREE.BufferGeometry().setFromPoints(circlePoints);
const circle = new THREE.LineLoop(circleGeometry, circleMaterial);
scene.add(circle);

// Animation loop
function animate() {
    requestAnimationFrame(animate);
    controls.update();
    renderer.render(scene, camera);
}

// Start animation loop
animate();
